/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CommonInterface extends utils.Interface {
  functions: {
    "computeContractId(address,address,uint256)": FunctionFragment;
    "getContract1(bytes32)": FunctionFragment;
    "getContract2(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeContractId"
      | "getContract1"
      | "getContract2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeContractId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract1",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract2",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract2",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Common extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeContractId(
      _alexWallet: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContract1(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        secret1encrypted: string;
        secret2encrypted: string;
        assetContract: string;
        tokenId: BigNumber;
        loanAmount: BigNumber;
        loanInterest: BigNumber;
        lenderDeposit: BigNumber;
        bobsWalet: string;
        alexWallet: string;
        status: number;
      }
    >;

    getContract2(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        secret1Hash: string;
        secret2Hash: string;
        preimage1: string;
        preimage2: string;
        reqTill: BigNumber;
        acceptTill: BigNumber;
        lockedTill: BigNumber;
        releaseTill: BigNumber;
      }
    >;
  };

  computeContractId(
    _alexWallet: PromiseOrValue<string>,
    _asset: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContract1(
    _contractId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      number
    ] & {
      secret1encrypted: string;
      secret2encrypted: string;
      assetContract: string;
      tokenId: BigNumber;
      loanAmount: BigNumber;
      loanInterest: BigNumber;
      lenderDeposit: BigNumber;
      bobsWalet: string;
      alexWallet: string;
      status: number;
    }
  >;

  getContract2(
    _contractId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      secret1Hash: string;
      secret2Hash: string;
      preimage1: string;
      preimage2: string;
      reqTill: BigNumber;
      acceptTill: BigNumber;
      lockedTill: BigNumber;
      releaseTill: BigNumber;
    }
  >;

  callStatic: {
    computeContractId(
      _alexWallet: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContract1(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        secret1encrypted: string;
        secret2encrypted: string;
        assetContract: string;
        tokenId: BigNumber;
        loanAmount: BigNumber;
        loanInterest: BigNumber;
        lenderDeposit: BigNumber;
        bobsWalet: string;
        alexWallet: string;
        status: number;
      }
    >;

    getContract2(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        secret1Hash: string;
        secret2Hash: string;
        preimage1: string;
        preimage2: string;
        reqTill: BigNumber;
        acceptTill: BigNumber;
        lockedTill: BigNumber;
        releaseTill: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    computeContractId(
      _alexWallet: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContract1(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContract2(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeContractId(
      _alexWallet: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContract1(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContract2(
      _contractId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
