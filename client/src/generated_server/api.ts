/* tslint:disable */
/* eslint-disable */
/**
 * bancoserver
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface ALoan
 */
export interface ALoan {
  /**
   *
   * @type {string}
   * @memberof ALoan
   */
  id?: string | null
  /**
   *
   * @type {boolean}
   * @memberof ALoan
   */
  nftVerified: boolean
  /**
   *
   * @type {string}
   * @memberof ALoan
   */
  erCaddress: string
  /**
   *
   * @type {string}
   * @memberof ALoan
   */
  tokenAddress: string
  /**
   *
   * @type {number}
   * @memberof ALoan
   */
  loanAmount: number
  /**
   *
   * @type {number}
   * @memberof ALoan
   */
  loanDuration: number
  /**
   *
   * @type {LoanDurationWindow}
   * @memberof ALoan
   */
  loanDurationWindow: LoanDurationWindow
  /**
   *
   * @type {number}
   * @memberof ALoan
   */
  interestAmount: number
  /**
   *
   * @type {LoanStatus}
   * @memberof ALoan
   */
  loanStatus?: LoanStatus
  /**
   *
   * @type {string}
   * @memberof ALoan
   */
  requesterTzAddress: string
  /**
   *
   * @type {string}
   * @memberof ALoan
   */
  requesterEvmAddress: string
}
/**
 *
 * @export
 * @enum {string}
 */

export const LoanDurationWindow = {
  Days: 'days',
  Months: 'months',
  Years: 'years',
} as const

export type LoanDurationWindow = typeof LoanDurationWindow[keyof typeof LoanDurationWindow]

/**
 *
 * @export
 * @enum {string}
 */

export const LoanStatus = {
  Created: 'state_created',
  BobFunded: 'state_bobFunded',
  MovedToEscrow: 'state_movedToEscrow',
  RefundToBob: 'state_refundToBob',
  RefundToAlex: 'state_refundToAlex',
  Returned: 'state_returned',
  Defaulted: 'state_defaulted',
  Released: 'state_released',
  Fortified: 'state_fortified',
} as const

export type LoanStatus = typeof LoanStatus[keyof typeof LoanStatus]

/**
 * LoansApi - axios parameter creator
 * @export
 */
export const LoansApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {ALoan} [aLoan]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLoansApplyPost: async (
      aLoan?: ALoan,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Loans/apply`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        aLoan,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} loanId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLoansByIdLoanIdGet: async (
      loanId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loanId' is not null or undefined
      assertParamExists('apiLoansByIdLoanIdGet', 'loanId', loanId)
      const localVarPath = `/api/Loans/byId/{loanId}`.replace(
        `{${'loanId'}}`,
        encodeURIComponent(String(loanId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {LoanStatus} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLoansListLoansStatusGet: async (
      status: LoanStatus,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'status' is not null or undefined
      assertParamExists('apiLoansListLoansStatusGet', 'status', status)
      const localVarPath = `/api/Loans/listLoans/{status}`.replace(
        `{${'status'}}`,
        encodeURIComponent(String(status)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LoansApi - functional programming interface
 * @export
 */
export const LoansApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoansApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {ALoan} [aLoan]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLoansApplyPost(
      aLoan?: ALoan,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ALoan>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoansApplyPost(
        aLoan,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @param {string} loanId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLoansByIdLoanIdGet(
      loanId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ALoan>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoansByIdLoanIdGet(
        loanId,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
    /**
     *
     * @param {LoanStatus} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLoansListLoansStatusGet(
      status: LoanStatus,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ALoan>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoansListLoansStatusGet(
        status,
        options,
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      )
    },
  }
}

/**
 * LoansApi - factory interface
 * @export
 */
export const LoansApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LoansApiFp(configuration)
  return {
    /**
     *
     * @param {ALoan} [aLoan]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLoansApplyPost(aLoan?: ALoan, options?: any): AxiosPromise<ALoan> {
      return localVarFp
        .apiLoansApplyPost(aLoan, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} loanId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLoansByIdLoanIdGet(loanId: string, options?: any): AxiosPromise<ALoan> {
      return localVarFp
        .apiLoansByIdLoanIdGet(loanId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {LoanStatus} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLoansListLoansStatusGet(
      status: LoanStatus,
      options?: any,
    ): AxiosPromise<Array<ALoan>> {
      return localVarFp
        .apiLoansListLoansStatusGet(status, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * LoansApi - object-oriented interface
 * @export
 * @class LoansApi
 * @extends {BaseAPI}
 */
export class LoansApi extends BaseAPI {
  /**
   *
   * @param {ALoan} [aLoan]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoansApi
   */
  public apiLoansApplyPost(aLoan?: ALoan, options?: AxiosRequestConfig) {
    return LoansApiFp(this.configuration)
      .apiLoansApplyPost(aLoan, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} loanId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoansApi
   */
  public apiLoansByIdLoanIdGet(loanId: string, options?: AxiosRequestConfig) {
    return LoansApiFp(this.configuration)
      .apiLoansByIdLoanIdGet(loanId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {LoanStatus} status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoansApi
   */
  public apiLoansListLoansStatusGet(
    status: LoanStatus,
    options?: AxiosRequestConfig,
  ) {
    return LoansApiFp(this.configuration)
      .apiLoansListLoansStatusGet(status, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
